{"version":3,"sources":["components/TempApp.js","App.js","reportWebVitals.js","index.js"],"names":["TempApp","useState","city","setCity","search","setSearch","useEffect","a","url","fetch","response","json","resJson","main","fetchApi","className","type","value","onChange","event","target","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAsEeA,G,MAvDC,WAAO,IAAD,EAEOC,mBAAS,MAFhB,mBAEXC,EAFW,KAELC,EAFK,OAGUF,mBAAS,SAHnB,mBAGXG,EAHW,KAGHC,EAHG,KAgBlB,OAXAC,qBAAY,YACM,uCAAG,gCAAAC,EAAA,6DACPC,EADO,2DACmDJ,EADnD,iEAEUK,MAAMD,GAFhB,cAEPE,EAFO,gBAGSA,EAASC,OAHlB,OAGPC,EAHO,OAKbT,EAAQS,EAAQC,MALH,2CAAH,qDAOdC,KACF,CAACV,IAGC,mCACI,sBAAKW,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,uBACAC,KAAK,SACLC,MAAOb,EACPW,UAAU,aACVG,SAAW,SAACC,GAAWd,EAAUc,EAAMC,OAAOH,YAIxDf,EAGE,gCACA,sBAAKa,UAAU,OAAf,UACI,qBAAIA,UAAU,WAAd,UACA,mBAAGA,UAAU,qBAAb,eADA,IACyCX,KAEzC,qBAAIW,UAAU,OAAd,UACCb,EAAKmB,KADN,aAGA,qBAAIN,UAAU,cAAd,oBAAoCb,EAAKoB,SAAzC,mBAAgEpB,EAAKqB,SAArE,iBAGJ,qBAAKR,UAAY,cACjB,qBAAKA,UAAY,cACjB,qBAAKA,UAAY,mBAfjB,mBAAGA,UAAU,WAAb,oCCjCGS,MAPf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0843abb7.chunk.js","sourcesContent":["//npx helps us provide versioning,dependency issues and installing unnecessary packages that we just want to try out \r\n//it also provide a clear and easy way of executing pacakges , commands , modules and even github and repositories.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./CSS/style.css\";\r\n\r\n// useState is a Hook (function) that allows you to have state variables in functional components. you pass the initial state to this fucntion \r\n//anc it returns a variable with the current state value (not necessarily the initial state) and another function to update this value.\r\n//fde28d68188251f9f03fedea57290b8e\r\n//api.openweathermap.org/data/2.5/weather?q={city name}&appid=fde28d68188251f9f03fedea57290b8e\r\n//By using useEffect() Hook, you tell react that your components needs to do somthing after render. React will remember the function you \r\n//passed (we'll refer to it as our \"effect\"), and call it later after performing the DOM updates\r\n//b14425a6554d189a2d7dc18a8e7d7263 = APIID thapa teachnical\r\n//fde28d68188251f9f03fedea57290b8e\r\n\r\nconst TempApp = () => {\r\n\r\n    const [city, setCity ] = useState(null);\r\n    const [search, setSearch] = useState(\"Delhi\");\r\n\r\n    useEffect ( () => {\r\n        const fetchApi = async () => {\r\n            const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=b14425a6554d189a2d7dc18a8e7d7263`\r\n            const response = await fetch(url); \r\n            const resJson = await response.json();\r\n            //console.log(resJson); \r\n            setCity(resJson.main);\r\n        };\r\n        fetchApi();\r\n    },[search] )\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"box\">\r\n                <div className=\"inputData\">\r\n                    <input \r\n                    type=\"search\"\r\n                    value={search}\r\n                    className=\"inputFeild\"\r\n                    onChange={ (event) => {setSearch(event.target.value) } } />\r\n                \r\n\r\n                </div>\r\n        {!city ? (\r\n            <p className=\"errorMsg\"> No Data Found </p>\r\n        ) : (\r\n            <div>\r\n            <div className=\"info\">\r\n                <h2 className=\"location\">\r\n                <i className=\"fas fa-street-view\"> </i> {search}\r\n                </h2>\r\n                <h1 className=\"temp\">\r\n                {city.temp}°Cel\r\n                </h1>\r\n                <h3 className=\"tempmin_max\"> Min : {city.temp_min}°Cel | Max : {city.temp_max}°Cel </h3>\r\n            </div>\r\n\r\n            <div className = \"wave -one\"></div>\r\n            <div className = \"wave -two\"></div>\r\n            <div className = \"wave -three\"></div>\r\n            </div>\r\n\r\n        )}\r\n            \r\n            \r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\nexport default TempApp;","import React from \"react\";\nimport './App.css';\nimport TempApp from './components/TempApp';\n\nfunction App() {\n  return (\n    <TempApp />\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}